<?php

include_once('ax2.features.inc');

/**
 * @file ax2.module
 *  XML-RPC server and XML-RPC client for Aegir XML-RPC Sign Up module.
 */

//-------------------------------
// implementation of hooks
//-------------------------------

/**
 * Implementation of hook_menu().
 */
function ax2_menu() {
  $items = array();

  $items['admin/settings/ax2'] = array(
    'title' => t('Ax2: Aegir XML-RPC Sign Up'), 
    'description' => t('Configure settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ax2_admin_settings'),
    'access arguments' => array('administer ax'), 
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ax2.admin.inc', 
  );  
  $items['ax/thankyou'] = array(
    'title' => t('Thank You'), 
    'description' => t('Thank you for your interest '
                      ."in Stars with Stripes' campaign "
                      ."tools. "),
    'page callback' => 'ax2_thankyou_page',
    'access arguments' => array('access content'), 
    'type' => MENU_NORMAL_ITEM,
  );  

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function ax2_perm() {
  return array('administer ax', 'access site sign up');
}

/**
 * Implementation of hook_nodeapi().
 */
function ax2_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // verify we're trying to create a new website 
  $site_node = $node->field_website_site_node_created[0]['value'];
  if (!$site_node && $node->type == 'website') {

    // xmlrpc credentials
    $key = variable_get('ax2_api_key', FALSE);
    $key = base64_encode($key); // encode key before sending it
    $url = variable_get('ax2_ax1_url', FALSE); 

    switch($op) {
      case 'validate': 
        // Validate domain and aliases...
        $domain = $node->title;
        $aliases = $node->field_website_alias[0]['value'];
        $aliases = ($aliases) ? explode("\n", $aliases) : FALSE;

        // Check for spaces
        $x = explode(' ', $domain);
        if ($x[1]) {
          // validation failed
          $name = 'title';
          $message = t('Domain names may not include spaces.');
          form_set_error($name, $message);
        }
        if ($aliases) {
        foreach ($aliases as $alias) {
          $x = explode(' ', $alias);
          if ($x[1]) {
            // validation failed
            $name = 'field_website_alias';
            $message = t('Aliases may not include spaces.');
            form_set_error($name, $message);
          }
        }}

        // Check for weird characters 
        // strip out www and http
        if (substr($domain, 0, 7) == 'http://') {
          $domain = substr($domain, 7);  // strip out http://
          $node->title = $domain;
        } 
        if (substr($domain, 0, 4) == 'www.') {
          $domain = substr($domain, 4);  // strip out www.
          $node->title = $domain;
        }
        // now find weird characters 
        $chars = array('~','`','!','@','#','$','%','^',
                            '&','*','(',')','+','=','<','>',
                            '/','?',',','[','{',']','}','|',
                            '\\','_');
        foreach($chars as $char) {
          $x = strpos($domain, $char);
          if ($x) {
            // validation failed
            $name = 'title';
            $message = t('Domain names and aliases can only include letters, '
                        .'numbers, and hyphens. They cannot begin or end '
                        .'with a hyphen ("-"). And they must be less than '
                        .'63 characters.');
            form_set_error($name, $message);
          } 
          if ($aliases) {
          foreach($aliases as $alias) {
            $x = strpos($alias, $char);
            if ($x) {
              // validation failed
              $name = 'field_website_alias';
              $message = t('Domain names and aliases can only include letters, '
                        .'numbers, and hyphens. They cannot begin or end '
                        .'with a hyphen ("-"). And they must be less than '
                        .'63 characters.');
              form_set_error($name, $message);
            }
          }}
        }
   
        // Check length
        if (strlen($domain) >= 63) {
          // validation failed
          $name = 'title';
          $message = t('Domain names and aliases can only include letters, '
                      .'numbers, and hyphens. They cannot begin or end '
                      .'with a hyphen ("-"). And they must be less than '
                      .'63 characters.');
          form_set_error($name, $message);
        }
        if ($aliases) {
        foreach($aliases as $alias) {
          if (strlen($alias) >= 63) {
            // validation failed
            $name = 'field_website_alias';
            $message = t('Domain names and aliases can only include letters, '
                      .'numbers, and hyphens. They cannot begin or end '
                      .'with a hyphen ("-"). And they must be less than '
                      .'63 characters.');
          form_set_error($name, $message);
          }
        }}

        // Check for more than one sws domain in domain + alias
        $sws_count = 0; 
        if (strpos($domain, 'starswithstripes')) {
          $sws_count++;
        }
        if ($aliases) {
        foreach ($aliases as $alias) {
          if (strpos($alias, 'starswithstripes')) {
            $sws_count++;
          }
        }}
        if ($sws_count > 1) {
          // validation failed
          $name = 'field_website_alias';
          $message = t("We're happy to share our starswithstripes domains "
                      ."with you. But please only use one per website.");
          form_set_error($name, $message);
        }

        // Make sure requested domain and aliases don't already exist.
        $method_name = 'ax1.domain';
        $response = xmlrpc($url, $method_name, $key, $node->title, $aliases);
        // domain fails
        if (!$response['domain']) {
          // validation failed, domain name is already taken
          $name = 'title';
          $message = $response['message'][0];
          form_set_error($name, $message);
        }
        // alias fails
        if (!$response['alias']) {
          // validation failed, alias name(s) already taken
          $name = 'field_website_alias';
          $message = ''; // reset message incase there's something here already
          $i = ($response['domain']) ? 0 : 1;
          $j = count($response['message']); 
          while($i < $j) {
            $message .= $response['message'][$i];
            $i++;
          }
          form_set_error($name, $message);
        }
        if ($response === 'invalid key') {
          // watchdog/notification
          watchdog('ax2', 'invalid api key');
          return 'invalid key';
        }  
      break;
 
      case 'presave':
        // create a site node on Aegir
        $title = $node->title;
        $email = $node->field_website_email[0]['value'];
        $client = variable_get('ax2_client', FALSE); 
        $site->aliases = $node->field_website_alias[0]['value']; 
        // required fields
        $site->title = $title; // domain
        $site->client = ($client) ? $client : $email;
        $site->platform = variable_get('ax2_platform', NULL); 
        $site->profile = variable_get('ax2_profile', NULL); 
        // create site node
        $method_name = 'ax1.createSite'; // method for creating site nodes on Aegir
        $response = xmlrpc($url, $method_name, $key, $site);
        // update website nodes with 'site node created'
        if ($response == 'success') {
        // TODO Log record in watchdog.
          $node->field_website_site_node_created[0]['value'] = 1;
          $node->field_website_site_node_created[0]['value'] = 1;
          $mail = $node->field_website_email[0]['value'];
          $txt = t('Your new website is ready. Further instructions '
                  .'have been emailed to !mail.', array('!mail' => $mail));
          drupal_set_message($txt);
        } else {
          // todo Add job to queue here. Failures should stay in queue to be processed later (e.g. on cron?). 
          // todo Don't forget to update field_website_site_node_created when job in queue is processed.
        } 
      break;
    }
  }
}

/**
 * Implementation of hook_form_alter().
 * 
 * Access control for administrative fields.
 */
function ax2_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'website_node_form') {
    $form['title']['#description'] = t('Enter your domain here (example.com or '
                          .'janeforsenate.com). '
                          .'To use a free Stars with Stripes domain, '
                          .'choose a website address like this: <br/>'
                          .'<ul>'
                          .'<li>'
                          .'something.starswithstripes.com <br/>'
                          .'</li>'
                          .'<li>'
                          .'anything.starswithstripes.com <br/>'
                          .'</li>'
                          .'<li>'
                          .'yourname.starswithstripes.com <br/>'
                          .'</li>'
                          .'</ul>');
                          
    //$form['title']['#description'] = t('Enter the URL '
      //                    .'(website address) you want here. '
        //                  .'Example: <br/> something.starswithstripes.com <br/>'
          //                .'anything.starswithstripes.com <br/>'
            //              .'yourname.starswithstripes.com <br/>');
    $form['field_website_site_node_created']['#access'] = user_access('aminister_nodes');
    $form['field_website_created']['#access'] = user_access('aminister_nodes');
    $form['#redirect'] = array('ax/thankyou');
  }
}

//-------------------------------
// xml-rpc server 
//-------------------------------

/**
 * Implementation of hook_xmlrpc().
 */
function ax2_xmlrpc() {
  $methods['ax2.getUserInfo'] = 'xmls_ax2_getuserinfo';
  
  return $methods;
}

/**
 * xml-rpc callback for method ax2.getUserInfo.
 * 
 * Set 'website created' field to TRUE.
 * 
 * At this stage a website sign up 
 * is reaching the end of it's life cycle. 
 * That is, a user requested a website (here, through 
 * the ax2 module), that website was created 
 * by Aegir (by the ax1 module), and now 
 * the user who requested the webiste is being
 * notified about their new account. At this stage
 * ax2 sets the field 'website created' (field_website_created_value)
 * to TRUE. 
 * 
 * @param
 *  $key, base64_encode()ed API key
 * 
 * @param
 *  $domain, string, this is the $base_url for the website
 *  calling this method.
 * 
 * @return
 *  $user, an array of user info to be used to create a new user 
 *  (user number 2) in the new website.
 */
function xmls_ax2_getuserinfo($key, $domain) {
  $key = base64_decode($key);
  $valid_key = variable_get('ax2_api_key', FALSE);
  if ($key == $valid_key) {
    // get requested info 
    $result = db_query("SELECT n.nid, "
                      ."field_website_email_value AS mail, "
                      ."field_website_contact_name_value AS name "
                      ."FROM {node} n "
                      ."JOIN {content_type_website} w ON n.nid = w.nid "
                      ."WHERE title = '%s' ", $domain);
    // note: there should only be one result.
    // todo Add some sort of validation or error handling here?  
    while ($row = db_fetch_array($result)){
      $user = array();
      $user['mail'] = $row['mail'];
      $user['name'] = $row['name']; 
      $nid = $row['nid'];
    }
   
    // Note: If a someone installs a site manually on Aegir
    // w/ ax3 built into the install profile, this method
    // gets called, even though the site wasn't created by ax2. 
    // Check for no results to the query (no nid).
    // Return false, to tell the install profile not to create
    // a user 2.
    if ($nid) {
      // Update website as 'created'.
      $node = node_load($nid);
      $node->field_website_created[0]['value'] = 1;
      node_save($node); 
      return $user;
    } else {
      // the website being installed was not created by ax2
      return FALSE;
    }
  } else {
    return 'invalid key';
  }
}

/**
 * Callback for hook_menu() ax/thankyou.
 * 
 * Display a thank you page to user after
 * creating a new website. 
 */
function ax2_thankyou_page() {
  $output = variable_get('ax2_thankyou_page', NULL);
  return check_markup($output);
}
