<?php

include_once('ax2.features.inc');

/**
 * @file ax2.module
 *  XML-RPC server and XML-RPC client for Aegir XML-RPC Sign Up module.
 */

//-------------------------------
// implementation of hooks
//-------------------------------

/**
 * Implementation of hook_menu().
 */
function ax2_menu() {
  $items = array();

  $items['admin/settings/ax2'] = array(
    'title' => t('Ax2: Aegir XML-RPC Sign Up'), 
    'description' => t('Configure settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ax2_admin_settings'),
    'access arguments' => array('administer ax'), 
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ax2.admin.inc', 
  );  

  return $items;
}

/**
 * Implementation of hook_perm().
 */

/**
 * Implementation of hook_nodeapi().
 */
function ax2_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {

// TODO Validate. Make sure requested domain doesn't already exist.

  // If Aegir site node has not been created, create it.
  $site_node = $node->field_website_site_node_created[0]['value'];
  if (!$site_node && $node->type == 'website' && $op == 'presave') {
    // create site nodes on Aegir
    $title = $node->title;
    $email = $node->field_website_email[0]['value'];
    $client = variable_get('ax2_client', FALSE); 
    // required fields
    $site->title = $title; // domain
    $site->client = ($client) ? $client : $email;
    $site->platform = variable_get('ax2_platform', NULL); 
    $site->profile = variable_get('ax2_profile', NULL); 
    $site->aliases = variable_get('ax2_aliases', NULL); // TODO // array
    // create site node
    $key = variable_get('ax2_api_key', FALSE);
    $key = base64_encode($key); // encode key before sending it
    $url = variable_get('ax2_ax1_url', FALSE); 
    $method_name = 'ax1.createSite'; // method for creating site nodes on Aegir
    $response = xmlrpc($url, $method_name, $key, $site);
    // update website nodes with 'site node created'
    if ($response == 'success') {
// TODO Log record in watchdog.
      $node->field_website_site_node_created[0]['value'] = 1;
      $node->field_website_site_node_created[0]['value'] = 1;
      $mail = $node->field_website_email[0]['value'];
      $txt = t('Your new website is ready. Further instructions have been emailed to !mail.', array('!mail' => $mail));
      drupal_set_message($txt);
    } else {
      // todo Add job to queue here. Failures should stay in queue to be processed later (e.g. on cron?). 
      // todo Don't forget to update field_website_site_node_created when job in queue is processed.
      }
  }
}

/**
 * Implementation of hook_form_alter().
 * 
 * Access control for administrative fields.
 */


//-------------------------------
// xml-rpc server 
//-------------------------------

/**
 * Implementation of hook_xmlrpc().
 */
function ax2_xmlrpc() {
  $methods['ax2.getUserInfo'] = 'xmls_ax2_getuserinfo';
  
  return $methods;
}

/**
 * xml-rpc callback for method ax2.getUserInfo.
 * 
 * Set 'website created' field to TRUE.
 * 
 * At this stage a website sign up 
 * is reaching the end of it's life cycle. 
 * That is, a user requested a website (here, through 
 * the ax2 module), that website was created 
 * by Aegir (by the ax1 module), and now 
 * the user who requested the webiste is being
 * notified about their new account. At this stage
 * ax2 sets the field 'website created' (field_website_created_value)
 * to TRUE. 
 * 
 * @param
 *  $key, base64_encode()ed API key
 * 
 * @param
 *  $domain, string, this is the $base_url for the website
 *  calling this method.
 * 
 * @return
 *  $user, an array of user info to be used to create a new user 
 *  (user number 2) in the new website.
 */
function xmls_ax2_getuserinfo($key, $domain) {
  $key = base64_decode($key);
  $valid_key = variable_get('ax2_api_key', FALSE);
  if ($key == $valid_key) {
    // get requested info 
    $result = db_query("SELECT n.nid, "
                      ."field_website_email_value AS mail, "
                      ."field_website_contact_name_value AS name "
                      ."FROM {node} n "
                      ."JOIN {content_type_website} w ON n.nid = w.nid "
                      ."WHERE title = '%s' ", $domain);
    // note: there should only be one result.
    // todo Add some sort of validation or error handling here?  
    while ($row = db_fetch_array($result)){
      $user = array();
      $user['mail'] = $row['mail'];
      $user['name'] = $row['name']; 
      $nid = $row['nid'];
    }

    // Update website as 'created'.
    $node = node_load($nid);
    $node->field_website_created[0]['value'] = 1;
    node_save($node); 

    return $user;
  } else {
    return 'invalid key';
  }
}
